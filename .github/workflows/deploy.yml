name: Deploy to AWS ECS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws_creds

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"
          docker build -t "$IMAGE_URI" ./symfony-app
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: symfony-app-container
          image: ${{ env.IMAGE_URI }}

#      - name: Deploy to ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          service: ${{ secrets.ECS_SERVICE }}
#          cluster: ${{ secrets.ECS_CLUSTER }}
#          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      - name: Retry ECS deployment (AWS CLI)
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --force-new-deployment \
              --region ${{ secrets.AWS_REGION }} 

